// function custom_category_list_shortcode($atts) {
//     // Shortcode attributes (if needed)
//     $atts = shortcode_atts(array(
//         'orderby' => 'name',
//         'order'   => 'ASC',
//     ), $atts);

//     // Query categories based on shortcode attributes
//     $categories = get_categories(array(
//         'orderby' => $atts['orderby'],
//         'order'   => $atts['order'],
//     ));

//     // Start building the output
//     $output = '';
//     // Loop through categories and create list items
//     foreach ($categories as $category) {
//         $output .= '<a href="' . get_category_link($category->term_id) . '" class="text-decoration-none mb-2">
//         <span class="badge text-bg-green rounded-2 text-small px-3 me-2">' . $category->name . '</span></a>';
//     }
//     return $output;
// }   
// add_shortcode('all_category_list', 'custom_category_list_shortcode');




















<?php
/**
 * Register Herbanext Custom Post Type.
 * @package herbanext
 */
namespace HERBANEXT_THEME\Inc;
use HERBANEXT_THEME\Inc\Traits\Singleton;

class HerbanextCPT{
    use Singleton;

    protected function __construct() {
        // Add action hooks to register custom post types
        $this->setup_cpt_hooks();
    }

    protected function setup_cpt_hooks(){
        add_action('init', [$this, 'register_careers_post_type']);
        add_action('init', [$this, 'register_publications_post_type']);
        add_action('init', [$this, 'register_trainingseminars_post_type']);
    }
    // Register Custom Post Type for Careers
    public function register_careers_post_type() {
        $labels = array(
            'name'                  => 'Careers',
            'singular_name'         => 'Career',
            'menu_name'             => 'Careers',
            'add_new'               => 'Add New Career',
            'add_new_item'          => 'Add New Career',
            'edit_item'             => 'Edit Career',
            'new_item'              => 'New Career',
            'all_items'             => 'All Careers',
            'view_item'             => 'View Career',
            'search_items'          => 'Search Careers',
            'not_found'             => 'No careers found',
            'not_found_in_trash'    => 'No careers found in trash',
            
        );

        $args = array(
            'labels'                => $labels,
            'public'                => true,
            'publicly_queryable'    => true,
            'show_ui'               => true,
            'show_in_menu'          => true,
            'query_var'             => true,
            'rewrite'               => array('slug' => 'careers'),
            'taxonomies'            => ['post_tag', 'category'],	
            'capability_type'       => 'post',
            'has_archive'           => true,
            'hierarchical'          => false,
            'menu_position'         => 4,
            'show_in_rest'          => true,
            'supports'              => array(
                'title',
                'editor',
                'excerpt',
                'trackbacks',
                'custom-fields',
                'comments',
                'revisions',
                'thumbnail',
                'author',
                'page-attributes',
                'permalinks',
            ),
            'menu_icon'             => 'dashicons-businessman', // Icon for Careers
        );

        register_post_type('careers', $args);
    }

    // Register Custom Post Type for Publications
    public function register_publications_post_type() {
        $labels = array(
            'name'                  => 'Publications',
            'singular_name'         => 'Publication',
            'menu_name'             => 'Publications',
            'add_new'               => 'Add New Publication',
            'add_new_item'          => 'Add New Publication',
            'edit_item'             => 'Edit Publication',
            'new_item'              => 'New Publication',
            'all_items'             => 'All Publications',
            'view_item'             => 'View Publication',
            'search_items'          => 'Search Publications',
            'not_found'             => 'No publications found',
            'not_found_in_trash'    => 'No publications found in trash',
        );

        $args = array(
            'labels'                => $labels,
            'public'                => true,
            'publicly_queryable'    => true,
            'show_ui'               => true,
            'show_in_menu'          => true,
            'query_var'             => true,
            'rewrite'               => array('slug' => 'publications'),
            'taxonomies'            => ['post_tag', 'category'],
            'capability_type'       => 'post',
            'has_archive'           => true,
            'hierarchical'          => false,
            'menu_position'         => 5,
            'show_in_rest'          => true,
            'supports'              => array(
                'title',
                'editor',
                'excerpt',
                'trackbacks',
                'custom-fields',
                'comments',
                'revisions',
                'thumbnail',
                'author',
                'page-attributes',
                'permalinks',
            ),
            'menu_icon'             => 'dashicons-welcome-write-blog', // Icon for Publications
        );

        register_post_type('publications', $args);
    }

    // Register Custom Post Type for Training Seminars
    public function register_trainingseminars_post_type() {
        $labels = array(
            'name'                  => 'Training Seminars',
            'singular_name'         => 'Training Seminar',
            'menu_name'             => 'Training Seminars',
            'add_new'               => 'Add New Training Seminar',
            'add_new_item'          => 'Add New Training Seminar',
            'edit_item'             => 'Edit Training Seminar',
            'new_item'              => 'New Training Seminar',
            'all_items'             => 'All Training Seminars',
            'view_item'             => 'View Training Seminar',
            'search_items'          => 'Search Training Seminars',
            'not_found'             => 'No training seminars found',
            'not_found_in_trash'    => 'No training seminars found in trash',
        );

        $args = array(
            'labels'                => $labels,
            'public'                => true,
            'publicly_queryable'    => true,
            'show_ui'               => true,
            'show_in_menu'          => true,
            'query_var'             => true,
            'rewrite'               => array('slug' => 'training-and-seminars'),
            'taxonomies'            => ['post_tag', 'category'],
            'capability_type'       => 'post',
            'has_archive'           => true,
            'hierarchical'          => false,
            'menu_position'         => 6,
            'show_in_rest'          => true,
            'supports'              => array(
                'title',
                'editor',
                'excerpt',
                'trackbacks',
                'custom-fields',
                'comments',
                'revisions',
                'thumbnail',
                'author',
                'page-attributes',
                'permalinks',
            ),
            'menu_icon'             => 'dashicons-groups', // Icon for Training Seminars
        );

        register_post_type('trainingseminars', $args);
    }

}



















function custom_category_list_shortcode($atts) {
    // Shortcode attributes (if needed)
    $atts = shortcode_atts(array(
        'orderby' => 'name',
        'order'   => 'ASC',
    ), $atts);

    // Query categories based on shortcode attributes
    $categories = get_categories(array(
        'orderby' => $atts['orderby'],
        'order'   => $atts['order'],
    ));

    // Start building the output
    $output = '';
    // Loop through categories and create list items
    foreach ($categories as $category) {
        $output .= '<a href="' . get_category_link($category->term_id) . '" class="text-decoration-none mb-2">
        <span class="badge text-bg-green rounded-2 text-small px-3 me-2">' . $category->name . '</span></a>';
    }
    return $output;
}   
add_shortcode('all_categories', 'custom_category_list_shortcode');





                            <?php
                                // Get the post content or any other content you want to search
                                $content = get_post()->post_content; // Replace with your content source

                                // Define the shortcode you want to search for
                                $shortcode = '[all_categories]';

                                // Check if the shortcode exists in the content
                                if (strpos($content, $shortcode) !== false):
                                    // Display the shortcode if found
                                    echo do_shortcode($shortcode);
                                else:
                                    // The shortcode [all_categories] is not present in the content
                                    echo 'The shortcode [all_categories] is not present in the content.';
                                endif
                            
                            ?>









// Get all categoreis
function get_all_categories_shortcode() {
    $categories = get_categories(array(
        'post_type' => ['post', 'careers', 'publications', 'trainingseminars'],
        'hide_empty' => 1,
    ));

    ob_start();

    foreach ($categories as $category) {
        echo '<a href="' . esc_url(get_category_link($category->term_id)) . '" class="badge text-bg-green rounded-2 mb-2 text-small px-3 me-2 text-decoration-none">' . esc_html($category->name) . '</a>';
    }

    return ob_get_clean();
}

add_shortcode('all_categories', 'get_all_categories_shortcode');


















<?php
/**
 * Functions template
 * @package herbanext
 */

use HERBANEXT_THEME\Inc\HERBANEXT_THEME;

!defined('HERBANEXT_DIR_PATH') ? define('HERBANEXT_DIR_PATH',untrailingslashit( get_template_directory() )) : '';
!defined('HERBANEXT_DIR_URI') ? define('HERBANEXT_DIR_URI',untrailingslashit( get_template_directory_uri() )) : '';
require_once HERBANEXT_DIR_PATH . '/inc/helpers/autoloader.php';

function herbanext_get_theme_instance(){
    HERBANEXT_THEME::get_instance();
}
herbanext_get_theme_instance();

// bootstrap navwalker
if ( ! file_exists( get_template_directory() . '/inc/navwalker/bootstrap_5_wp_nav_menu_walker.php' ) ) 
{
        // file does not exist... return an error.
        return new WP_Error( 'bootstrap_5_wp_nav_menu_walker-missing', __( 'It appears the bootstrap_5_wp_nav_menu_walker.php file may be missing.', 'bootstrap_5_wp_nav_menu_walker' ) );
} else{
        // file exists... require it.
        require_once get_template_directory().'/inc/navwalker/bootstrap_5_wp_nav_menu_walker.php';
}


remove_action( 'woocommerce_before_shop_loop', 'woocommerce_catalog_ordering', 30 );
add_filter( 'woocommerce_page_title', 'new_woocommerce_page_title' );
function new_woocommerce_page_title( $page_title ) {
	if ( $page_title == 'Shop' ) {
		return '<span class="fw-bold fs-2">Prodcut Catalog</span>';
	}
}

// Encapsulate ACF fields
function get_acf_field($field_name) {
    return function_exists('get_field') ? get_field($field_name) : null;
}

// Add custom image tag in product catalog
if (!function_exists('woocommerce_template_loop_product_thumbnail')) {
    function woocommerce_template_loop_product_thumbnail() {
        if (!class_exists('WooCommerce')) {
            return;
        }

        global $post;
        $size = 'shop_catalog'; // You can change the image size here.
        $title = get_the_title();
        $image = has_post_thumbnail() ? get_the_post_thumbnail_url($post->ID, $size) : wc_placeholder_img_src($size);

        echo '<img class="rounded-3" src="' . esc_url($image) . '" alt="' . esc_attr($title) . '">';
    }
}



// Get Categories by Post Type
function post_categories_by_post_type_shortcode($atts) {
    global $post;

    // Check if we have a valid post
    if (!isset($post) || empty($post->ID)) {
        return 'No post found.';
    }

    // Define the allowed post types
    $allowed_post_types = array('careers', 'publications', 'trainingseminars', 'post');

    // Get the post's post type
    $post_type = get_post_type($post);

    // Check if the post type is allowed
    if (in_array($post_type, $allowed_post_types)) {
        // Get the post's categories
        $categories = get_the_category();
        $output = '';

        if (!empty($categories)) {
            foreach ($categories as $category) {
                $output .= '<a href="' . get_category_link($category->term_id) . '" class="text-decoration-none mb-2">
                    <span class="badge text-bg-green rounded-2 text-small px-3 me-2">
                    ' . $category->name . '</span></a>';
            }
        } else {
            $output = '';
        }
    } else {
        $output = '';
    }
    return $output;
}

add_shortcode('post_categories', 'post_categories_by_post_type_shortcode');


function custom_category_list_shortcode($atts) {
    // Shortcode attributes (if needed)
    $atts = shortcode_atts(array(
        'orderby' => 'name',
        'order'   => 'ASC',
    ), $atts);

    // Query categories based on shortcode attributes
    $categories = get_categories(array(
        'orderby' => $atts['orderby'],
        'order'   => $atts['order'],
    ));

    // Start building the output
    $output = '';
    // Loop through categories and create list items
    foreach ($categories as $category) {
        $output .= '<a href="' . get_category_link($category->term_id) . '" class="text-decoration-none mb-2">
        <span class="badge text-bg-green rounded-2 text-small px-3 me-2">' . $category->name . '</span></a>';
    }
    return $output;
}   
add_shortcode('all_categories', 'custom_category_list_shortcode');




// Breadcrumbs
function custom_breadcrumbs() {
    echo '<a class="text-success text-decoration-none" href="'.esc_url(home_url()).'" rel="nofollow"><i class="bi bi-house me-2"></i>'.__('Home', 'your-herbanext').'</a>';

    if (is_archive() || is_home()) {
        echo "&nbsp;&nbsp;&#187;&nbsp;&nbsp;";
        echo '<span>' . esc_html(wp_title('', false)) . '</span>';
    }

    if (is_category() || is_single()) {
        echo "&nbsp;&nbsp;&#187;&nbsp;&nbsp;";
        
        // Get the post type's slug (or category slug)
        $post_type = get_post_type();
        $post_type_slug = '';

        if ($post_type == 'post') {
            $post_type_slug = __('News', 'herbanext');
        } else {
            if (is_single()) {
                $post_type_slug = ucfirst(get_post_type());
            } else {
                $post_type_slug = ucfirst(get_queried_object()->slug);
            }
        }
        // Construct the archive link manually
        $archive_link = esc_url(home_url()) . '/' . strtolower($post_type_slug) . '/';

        // Output the post type's slug as a breadcrumb with a link
        echo '<a class="text-success text-decoration-none" href="' . esc_url($archive_link) . '">' . esc_html($post_type_slug) . '</a>';

        if (is_single()) {
            echo " &nbsp;&nbsp;&#187;&nbsp;&nbsp; ";
            the_title();
        }
    } elseif (is_page()) {
        echo "&nbsp;&nbsp;&#187;&nbsp;&nbsp;";
        echo esc_html(get_the_title());
    } elseif (is_search()) {
        echo "&nbsp;&nbsp;&#187;&nbsp;&nbsp;".__('Search Results for... ', 'your-herbanext');
        echo '"<em>';
        echo esc_html(get_search_query());
        echo '</em>"';
    }
}


// Remove the product title from WooCommerce product loop
add_action('init', 'remove_loop_title');
function remove_loop_title() {
    remove_action('woocommerce_shop_loop_item_title', 'woocommerce_template_loop_product_title', 10);
}


///breadcrumbs
// function custom_breadcrumbs() {
//     echo '<a class="text-success text-decoration-none" href="'.esc_url(home_url()).'" rel="nofollow"><i class="bi bi-house me-2"></i>'.__('Home', 'your-herbanext').'</a>';

//     if (is_archive() || is_home()) {
//         echo "&nbsp;&nbsp;&#187;&nbsp;&nbsp;";
//         echo '<span>' . esc_html(wp_title('', false)) . '</span>';
//     }

//     if (is_category() || is_single()) {
//         echo "&nbsp;&nbsp;&#187;&nbsp;&nbsp;";
        
//         // Get the post type's slug (or category slug)
//         $post_type = get_post_type();
//         $post_type_slug = '';

//         if ($post_type == 'post') {
//             $post_type_slug = __('News', 'herbanext');
//         } else {
//             if (is_single()) {
//                 $post_type_slug = ucfirst(get_post_type());
//             } else {
//                 $post_type_slug = ucfirst(get_queried_object()->slug);
//             }
//         }
//         // Construct the archive link manually
//         $archive_link = esc_url(home_url()) . '/' . strtolower($post_type_slug) . '/';

//         // Output the post type's slug as a breadcrumb with a link
//         echo '<a class="text-success text-decoration-none" href="' . esc_url($archive_link) . '">' . esc_html($post_type_slug) . '</a>';

//         if (is_single()) {
//             echo " &nbsp;&nbsp;&#187;&nbsp;&nbsp; ";
//             the_title();
//         }
//     } elseif (is_page()) {
//         echo "&nbsp;&nbsp;&#187;&nbsp;&nbsp;";
//         echo esc_html(get_the_title());
//     } elseif (is_search()) {
//         echo "&nbsp;&nbsp;&#187;&nbsp;&nbsp;".__('Search Results for... ', 'your-herbanext');
//         echo '"<em>';
//         echo esc_html(get_search_query());
//         echo '</em>"';
//     }
// }




















function custom_get_featured_products_shortcode() {
        // Query WooCommerce for 4 featured products
        $featured_products = wc_get_products(array(
            'limit' => 4,
            'status' => 'publish',
            'visibility' => 'catalog',
            'featured' => true,
        ));
    
        // Initialize output
        $output = '';
    
        if (!empty($featured_products)) :
            foreach ($featured_products as $product) {
                $product_link = esc_url(get_permalink($product->get_id()));
                $product_image = esc_url(wp_get_attachment_image_url($product->get_image_id(), 'large'));
                $output .= '<div class="col">
                                <div class="position-relative">
                                    <a href="' . $product_link . '" class="text-decoration-none position-relative">
                                        <span class="position-absolute badge mt-3 ms-3 rounded-3 bg-success px-2 text-white small">
                                            Featured
                                        </span>
                                        <img src="' . $product_image . '" alt="' . esc_attr($product->get_name()) . '" class="img-fluid object-fit-cover rounded-5">
                                    </a>
                                </div>
                            </div>';
            }
        else :
            $output .= '<p>No featured products found.</p>';
        endif;
        return $output;
    }














      
    function herbanext_custom_btn_single(){
        $custom_btn_link = site_url('/contact');
        $custom_btn_link_2 = home_url('/shop');
        echo ' <div id="product_btn" class="vstack gap-3 col-md-5 mx-auto w-100 mt-5 mb-5">';
        echo '<a href="'.esc_url($custom_btn_link).'" class="btn btn-success py-3 fs-6"><i class="bi bi-info-circle me-2"></i>'.__("Inquire").'</a>';
        echo '<a href="'.esc_url($custom_btn_link_2).'" class="btn btn-outline-success btn-block btn-md py-3 px-4 mt-2 mb-3 ripple"><i class="bi bi-eye me-2"></i>'.__("View Other Products").'</a>';
        echo '</div>';
    }
    // remove sale tag
    function remove_woocommerce_sale_flash($html, $post, $product) {
        // Check if the product is on sale
        if ($product->is_on_sale()) {
            $html = '';
        }
        return $html;
    }
    // custom shop title
    function abChangeProductsTitle() {
        echo '<h5 class="woocommerce-loop-product_title museo text-center fw-bold"><a class="text-decoration-none text-success" href="'.get_the_permalink().'">' . get_the_title() . '</a></h5>';
    
    }